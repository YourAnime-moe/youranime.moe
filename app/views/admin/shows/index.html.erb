  <div id="progress" class="progress" style="margin-top: -3px;">
    <div class="indeterminate"></div>
  </div>

  <ul id="slide-out" class="sidenav sidenav-fixed">
    <div class="container-fluid center" style="padding-top: 10px;">
      <div class="row">
        <div class="col 4"><a href="/"><img src="/img/tanoshimu.png" style="height: 75px; object-fit: cover;" class="circle"></a></div>
        <div class="col 8"><h4>Shows</h4></div>
      </div>
    </div>
      <li><div class="divider"></div></li>
      <li><a class="subheader green-text">Published</a></li>
      <div id="published-list">
        <% @published_shows.each do |show| %>
          <div class="clickable plz-hover" show-id="<%= show.id %>" title="<%= show.get_title(default: "No title") %>">
            <li>
              <div class="row">
                <div class="col s3">
                  <img class="circle small-banner" src="<%= show.get_banner_url %>">
                </div>
                <div class="col s9" style="vertical-align: middle;"><span class="truncate"><%= show.get_title(html: true) %></span></div>
              </div>
            </li>
          </div>
        <% end %>
      </div>
      <li><div class="divider"></div></li>
      <li><a class="subheader red-text">Unpublished</a></li>
      <div id="unpublished-list">
        <% @unpublished_shows.each do |show| %>
          <div class="clickable" show-id="<%= show.id %>" title="<%= show.get_title %>">
            <li>
              <div class="row">
                <div class="col s3">
                  <img class="circle small-banner" src="<%= show.get_banner_url %>">
                </div>
                <div class="col s9"><span class="truncate show-title"><%= show.get_title(html: true) %></span></div>
              </div>
            </li>
          </div>
        <% end %>
      </div>
  </ul>

  <a href="#" data-activates="slide-out" class="button-collapse"><i class="material-icons">menu</i></a>

  <div id="show-body" class="page hidden" style="margin-left: 300px;">
    <div class="container">
      <div class="center">
        <h3 show-value="get_title" value-type="html" default-value="Loading...">Tanoshimu Show</h3>
        <a show-value="link-to" href="" target="_blank" class="btn btn-floating"><i class="material-icons">open_in_new</i></a>
      </div>
      <div class="row hidde">
        <div class="col s6">
          <h5 class="bold">Publishing</h5>
          <div class="row center">
              <p>This show is...</p>
              <div class="switch">
                  <label>
                    un-published
                    <input id="publish-switch" show-type="published" value-type="checkbox" type="checkbox">
                    <span class="lever"></span>
                    pubished
                  </label>
              </div>
          </div>

          <div id="publish-on-cont" class="row">
            <p style="margin: 40px 0 0;">You may choose to leave this show unpublished for now and publish it at a later date.</p>
            <div class="input-field col s12">
              <input tanoshimu-activate-on="" id="publish-on" type="text" class="datepicker">
              <label for="publish-on">Publish on...(optional)</label>
            </div>
          </div>

          <h5 class="bold">General info</h5>
          <div class="row">
            <div class="input-field col s6">
                <input show-value="title" value-type="input" placeholder="ex: Fairytail, Mitsudomoe" id="title" type="text" class="validate">
                <label for="title">Title</label>
              </div>
              <div class="input-field col s6">
                <input show-value="alternate_title" value-type="input" placeholder="ex: Fairy Tail" id="alternate_title" type="text" class="validate">
                <label for="alternate_title">Alternate title</label>
              </div>
          </div>
          <div class="row">
              <div class="input-field col s12">
                <textarea show-value="description" value-type="textarea" id="description" class="materialize-textarea"></textarea>
                <label for="description">Description/Summary</label>
              </div>
          </div>

          <h5 class="bold">Other info</h5>
          <div class="row">
              <div class="center">

                  <p>A show can be an <b>anime series</b>, a <b>movie</b> or a <b>drama</b>.</p>
                  <a show-value="show-type" id="show-type-btn" class='dropdown-trigger btn' href='#' data-target='show-type'>* Select *</a>
                  <ul id='show-type' class='dropdown-content'>
                      <li><a show-value="0" tanoshimu-updates="show-type-btn" href="#!">Anime Series</a></li>
                      <li><a show-value="1" tanoshimu-updates="show-type-btn" href="#!">Movie</a></li>
                      <li><a show-value="2" tanoshimu-updates="show-type-btn" href="#!">Drama</a></li>
                  </ul>
              </div>
          </div>
          <div class="row center">
              <p>A show can be <b>subbed in English</b>, <b>dubbed in English</b>, or available in both formats.</p>
              <div class="input-field col s12">
                  <select show-type="description" value-type="select" multiple>
                    <option data-icon="/img/icon-jp.png" value="1">Subbed</option>
                    <option data-icon="/img/icon-en.png" value="2">Dubbed</option>
                  </select>
                  <label>Subbed? Dubbed?</label>
              </div>
          </div>
        </div>
        <div class="col s6">
          <h5 class="bold">Media</h5>
          <div class="row">
            <p>Click on the square below to add or update the banner for this show.</p>
            <div waiting-for="small_banner" class="progress" style="margin-bottom: 0;">
                <div class="indeterminate"></div>
            </div>
            <div id="show-img-select" class="image-input clickable" style="">
                <img id="small_banner" class="" show-value="banner_url" value-type="src" src="/img/404.jpg" style="object-fit: cover; height: 100%; width: 100%;">
            </div>
            <div id="banner_preview_cont" class="hidden">
              <p class="bold"><i>Banner preview</i></p>
              <div class="image-preview">
                  <img id="banner_preview" class="" src="/img/404.jpg" style="object-fit: cover; height: 100%; width: 100%;">
              </div>
            </div>
            <form>
              <div class="file-field input-field hidden">
                <div class="btn">
                  <span>File</span>
                  <input id="show-img-file" type="file">
                  <input id="episode-video-file" type="file">
                  <input id="episode-img-file" type="file">
                </div>
                <div class="file-path-wrapper">
                  <input class="file-path validate" type="text">
                </div>
              </div>
            </form>
          </div>

          <div class="row">
            <p>Where on the file server should this banner be stored?</p>
            <div class="input-field col s12">
              <input show-value="image_path" value-type="input" placeholder="ex: /videos/icons/fairy-tail.png" id="banner" type="text" class="validate">
              <label for="banner">Banner path</label>
            </div>
          </div>

          <div class="row">
            <p>Where on the file server should videos be found?</p>
            <div class="input-field col s12">
              <input show-value="default_path" value-type="input" placeholder="ex: /videos/fairy-tail/" id="videos" type="text" class="validate">
              <label for="videos">Videos folder path</label>
            </div>
          </div>
        </div>
      </div>

      <div class="center">
        <h3>
          <span>Episodes</span>
          <button id="upload-episodes" class="btn green">Add one or more episodes</button>
        </h3>

      </div>
      <table>
        <thead>
          <tr>
            <th class="center">Title</th>
            <th class="center">Published?</th>
            <th class="center">Thumbnail</th>
            <th class="center">Video</th>
          </tr>
        </thead>
        <tbody id="episodes-body">

        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal Structure -->
  <div id="upload-episodes-modal" style="width: 75%; height: 90% !important;" class="modal modal-fixed-footer">
    <div class="modal-content">
      <h4>Uploading one or more episodes</h4>
      <p>
        Here, you can upload one or more episodes at the same time. To make things easier for you, we suggest that you follow our
        naming conventions.
      </p>
      <ul class="browser-default">
        <li>For episodes 0 to 9: <b>ep0X.mp4</b>. Example: episode 7 is <b>ep07.mp4</b></li>
        <li>For episodes 10 to 99: <b>epXX.mp4</b>. Example: episode 64 is <b>ep64.mp4</b></li>
        <li>For episodes 100 to 999: <b>epXXX.mp4</b>. Example: episode 345 is <b>ep345.mp4</b></li>
        <li>etc.</li>
      </ul>
      <p>If your files do not follow the convention, we will simple order them in the order you selected them.</p>
      <div upload-state="before" class="center">
        <p>Please press the button below to get started:</p>
        <button id="start-upload" class="btn">Select one or more files</button>
      </div>
      <div upload-state="edit" class="center">
        <form>
          <div class="file-field input-field hidden">
            <div class="btn">
              <span>File</span>
              <input id="upload-episodes-files" type="file" multiple>
            </div>
            <div class="file-path-wrapper">
              <input class="file-path validate" type="text">
            </div>
          </div>
        </form>
      </div>

      <div upload-state="after-parse">
        <table>
          <thead>
            <tr>
              <th while-uploading>Status</th>
              <th>Published?</th>
              <th>Number</th>
              <th>Title</th>
              <th>Preview</th>
              <th>File size</th>
              <th>Filename</th>
            </tr>
          </thead>
          <tbody id="episodes-upload-preview"></tbody>
        </table>
      </div>
    </div>
    <div class="modal-footer">
      <a href="#" while-uploading abort-upload class="waves-effect waves-red btn-flat red white-text">Stop</a>
      <a href="#" action-cancel="#upload-episodes-modal" class="modal-close waves-effect waves-red btn-flat red lighten-2">Dismiss</a>
      <a href="#" action="upload-episodes" class="hidden waves-effect waves-green btn green">Upload</a>
    </div>
  </div>

<div class="fixed-action-btn" style="bottom: 45px; right: 24px;">
  <a title="Add one or more episode(s)" id="upload-show" class="btn-floating btn-large red">
    <i class="material-icons">cloud_upload</i>
  </a>
  <ul>
    <li><a class="btn-floating red" style="transform: scaleY(0.4) scaleX(0.4) translateY(40px) translateX(0px); opacity: 0;"><i class="material-icons">insert_chart</i></a></li>
    <li><a class="btn-floating yellow darken-1" style="transform: scaleY(0.4) scaleX(0.4) translateY(40px) translateX(0px); opacity: 0;"><i class="material-icons">format_quote</i></a></li>
    <li><a class="btn-floating green" style="transform: scaleY(0.4) scaleX(0.4) translateY(40px) translateX(0px); opacity: 0;"><i class="material-icons">publish</i></a></li>
    <li><a class="btn-floating blue" style="transform: scaleY(0.4) scaleX(0.4) translateY(40px) translateX(0px); opacity: 0;"><i class="material-icons">attach_file</i></a></li>
  </ul>
</div>

  <script type="text/javascript">
    $(document).ready(function() {
      var current_show = null;
      var upload_episodes_data = null;
      var uploading = false;

      function getShow(id, callback, errorCallback) {
        setLoading(true);
        $.ajax({
          url: "/admin/shows/" + id + ".json",
          success: function(res) {
            setLoading(false);
            if (res.show) {
              callback(res.show);
            } else {
              errorCallback("No show was found.");
            }
          },
          error: function(e) {
            setLoading(false);
            if (errorCallback !== undefined) {
              errorCallback("Error on the server.", e);
            }
          }
        });

        $.ajax({
          url: '/admin/episodes',
          data: {show_id: id},
          success: function(response) {
            if (response.success) {
              drawEpisodes(response.episodes);
            } else {
              M.toast({html: "We were not able to get the episodes for this show!"});
            }
          }
        });
      }

      $('[abort-upload]').on('click', function(e) {
        e.preventDefault();
        abortAjaxQueue();
        $('[while-uploading]').addClass('hidden');
      });

      $('#publish-switch').on('change', function() {
        setPublishedDateEnabled(!$(this).is(":checked"));
      });

      $('#publish-switch').on('click', function() {
        setPublishedShow($(this).is(":checked"));
      });

      setShowsClickable();

      var first_show = <%= @select_show %>;
      if (first_show >= 0) {
        let $go_to_element = $('[show-id="' + first_show + '"]');
        $go_to_element.trigger('click');
        $('#slide-out').animate({scrollTop: $go_to_element.offset().top}, 2000);
      }

      $('#add-episodes').on('click', function(e) {

      });

      $('#show-img-select').on('click', function(e) {
        $('#show-img-file').click();
      });

      $("#show-img-file").change(function(e) {
        var ext = $(this).val().split('.').pop().toLowerCase();
        if($.inArray(ext, ['gif','png','jpg','jpeg']) == -1) {
            M.toast({html: "Please upload an image with a valid extension."});
            return;
        }
        showBannerPreview(this);
      });

      $("#episode-video-file").change(function(e) {
        var ext = $(this).val().split('.').pop().toLowerCase();
        if($.inArray(ext, ['mp4']) == -1) {
            M.toast({html: "Please select an mp4 file."});
            return;
        }
        setLoading(true, false);
        let id = $(this).attr('episode-id');
        $.ajax({
          url: '/admin/episodes/' + id,
          method: 'put',
            processData: false,
            contentType: false,
          success: function(e) {
            setLoading(false);
            console.log(e);
          },
          error: function(e) {
            setLoading(false);
          }
        });
      });

      $('#episode-img-file').change(function(e) {
        var ext = $(this).val().split('.').pop().toLowerCase();
        if($.inArray(ext, ['gif','png','jpg','jpeg']) == -1) {
            M.toast({html: "Please select an image with a valid extension file."});
            return;
        }
        setLoading(true, false);
        let files = this.files;
        let id = $(this).attr('episode-id');

        if (files && files.length > 0) {
          var form_data = new FormData();
          form_data.append('thumbnail', files[0]);

          $.ajax({
            url: '/admin/episodes/' + id,
            data: form_data,
            processData: false,
            contentType: false,
            method: 'put',
            success: function(e) {
              setLoading(false);
              if (e.success) {
                var reader = new FileReader();
                reader.onload = function(e) {
                  $('[preview-thumbnail][episode-id="' + id + '"]').attr('src', e.target.result);
                }
                reader.readAsDataURL(files[0]);
              }
            },
            error: function(e) {
              setLoading(false);
            }
          });
        }
      });

      $('#small_banner').on('load', function(e) {
         $('[waiting-for="small_banner"]').addClass('hidden');
         $('#small_banner').removeClass('img-loading');
      });

      $('[tanoshimu-updates]').on('click', function(e) {
        e.preventDefault();
        let value = $(this).html();
        $('#' + $(this).attr('tanoshimu-updates')).html(value);
      });

      $('#upload-show').on('click', function(e) {
        setLoading(true);
        let show_id = $('#show-body').attr('current-show-id');
        let form_data = new FormData();
        form_data.append('banner', $('#show-img-file')[0].files[0]);
        let to_update = ['title', 'alternate_title', 'description', 'image_path', 'default_path'];
        [].forEach.call(to_update, function(key) {
          form_data.append(key, $('[show-value="' + key + '"]').val());
        });

        $.ajax({
          url: '/admin/shows/' + show_id,
          processData: false,
          contentType: false,
          data: form_data,
          method: 'patch',
          success: function(response) {
            // No need to set loading to false
            let $go_to_element = $('[show-id="' + response.id + '"]');
            $go_to_element.trigger('click');
            refreshShows();
            M.toast({html: response.message});
          }
        });
      });

      $('[action-cancel]').on('click', function(e) {
        e.preventDefault();
        $($(this).attr('action-cancel')).modal('close');
      });

      $('#upload-episodes').on('click', function() {
        if (!uploading) {
          $('[while-uploading]').addClass('hidden');
        }
        $('#upload-episodes-modal').modal("open");
      });

      $('[action]').on('click', function(e) {
        e.preventDefault();

        let action = $(this).attr('action');
        console.log("Executing action " + action + "...");
        if (action == 'upload-episodes') {
          uploading = true;
          $('[while-uploading]').removeClass('hidden');
          uploadEpisodes(upload_episodes_data);
        }
      });

      $('#start-upload').on('click', function() {
        $('#upload-episodes-files').click();
      });

      $('#upload-episodes-files').on('change', function() {
        var files = $(this).prop("files");
        var episode_files_info = {};
        $("#episodes-upload-preview").html('');
        $('[action="upload-episodes"]').addClass('hidden');
        upload_episodes_data = null;

        var last_recorded_ep_num = 0;
        [].forEach.call(files, function(episode_file) {
          //console.log(episode_file);
          let regex = /ep(0?\d*)\.((\w)+)/g;
          let filename = episode_file.name;
          let type = episode_file.type;
          let episode_key = filename.split('.')[0];

          if (!filename || !type) {
            return;
          }

          var match = regex.exec(filename);
          var episode_number = null;
          let default_title = null;
          if (match) {
            episode_number = parseInt(match[1]);
            if (episode_number > last_recorded_ep_num) {
              last_recorded_ep_num = episode_number;
            }
            default_title = "Episode ".concat(episode_number < 10 ? "0"+episode_number : episode_number);
          } else {
            episode_number = ++last_recorded_ep_num;
            default_title = filename.split('.')[0];
          }


          var episode = {
            number: episode_number,
            name: filename,
            type: type,
            file: episode_file,
            default_title: default_title,
            image: /^image/.test(type),
            video: /^video/.test(type),
          };

          if (!episode_files_info[episode_key]) {
            episode_files_info[episode_key] = [];
          }

          if (episode.image) {
            episode_files_info[episode_key][0] = episode;
          } else if (episode.video) {
            episode_files_info[episode_key][1] = episode;
          }
        });

        var episodes_processed_count = 0;
        upload_episodes_data = [];

        [].forEach.call(Object.keys(episode_files_info), function(key) {
          let episode = episode_files_info[key];
          let $episode = makeEpisode(episode);
          if (!$episode) {
            return;
          }

          upload_episodes_data.push(episode);
          episodes_processed_count++;
          $('#episodes-upload-preview').append($episode);

          //console.log(episode);
          if (episode[0]) {
            let episode_data = episode[0];
            let $preview = $('img.preview[episode-number="' + episode_data.number + '"]');

            let reader = new FileReader();
            reader.onload = function(e) {
              $preview.attr('src', e.target.result);
            }
            reader.readAsDataURL(episode_data.file);
          }
        });

        $('[published-for]').on('change', function() {
          $(this).attr('is-published', $(this).is(':checked'));
          console.log($(this).is(':checked'));
        });
        $('[published-for]').prop('checked', true).change();

        if (episodes_processed_count) {
          M.toast({html: "Ready to upload " + episodes_processed_count + " episode(s)..."});
          let $upload_btn = $('[action="upload-episodes"]');
          $upload_btn.removeClass('hidden');
          $upload_btn.html('Upload (' + episodes_processed_count + ')');
        }
      });

      function makeEpisode(episode_data) {
        let $wrapper = $('<tr></tr>');
        let processed = true;

        [].forEach.call(episode_data, function(episode) {
          // make sure the episode is an image OR a video, NOT both.
          processed = (episode.image || episode.video)
            && ((!episode.video && episode.image) || (episode.video && !episode.image));
          if (!processed) {
            return;
          }
        });

        let episode_preview = episode_data[0];
        let episode_video = episode_data[1];

        let episode_info = processed ? (episode_video || episode_preview) : null;

        if (episode_info) {

          let $status = $('<div class="valign-wrapper"></div>').attr('status-for', episode_info.number);
          let status_html = [
            '<div spinner-loading-for="' + episode_info.number + '" class="preloader-wrapper small active">',
              '<div class="spinner-layer spinner-green-only">',
                '<div class="circle-clipper left">',
                  '<div class="circle"></div>',
                '</div><div class="gap-patch">',
                  '<div class="circle"></div>',
                '</div><div class="circle-clipper right">',
                  '<div class="circle"></div>',
                '</div>',
              '</div>',
            '</div>'
          ];
          $status.append(status_html.join(''));
          $wrapper.append($('<td while-uploading class="hidden"></td>').append($status));

          // Make it published by published by default:
          let $published_switch = $('<div class="switch"><label><input published-for="' + episode_info.number + '" type="checkbox"><span class="lever"></span></label></div>');

          $wrapper.append($('<td></td>').append($published_switch));

          // Set the episode number
          $wrapper.append($('<td></td>').html(episode_info.number));

          // Set the title
          let $title_input_wrapper = $('<div class="input-field col s4"></div');
          let $title_input = $('<input type="text">');

          $title_input.attr('placeholder', episode_info.default_title);
          $title_input.attr('episode-title-for', episode_info.number);
          $title_input.val(episode_info.default_title);
          $title_input_wrapper.append($title_input);

          $wrapper.append($('<td></td>').append($title_input_wrapper));

          // Set the preview if image
          $episode_preview = null;
          if (episode_preview) {
            $episode_preview = $('<img class="preview">').attr('episode-number', episode_info.number);
          } else {
            $episode_preview = $('<span>N/A</span>');
          }
          $wrapper.append($('<td></td>').append($episode_preview));

          // Set the file size
          $wrapper.append($('<td></td>').text(humanFileSize(episode_info.file.size)));

          // Set the filename
          $wrapper.append($('<td class=""></td>').html(episode_info.file.name));
        }

        if (processed) {
          console.log(episode_info);
          return $wrapper;
        }
      }

      function setPublishedDateEnabled(enabled) {
        if (enabled) {
          $('#publish-on-cont').removeClass('hidden');
        } else {
          $('#publish-on-cont').addClass('hidden');
        }
      }

      function uploadEpisodes(episodes) {
        var processed = 0;
        var left = episodes.length;
        [].forEach.call(episodes, function(episode) {
          var finish_for_image_only = episode[0] && !episode[1];
          if (episode[0]) {
            var episode_image = episode[0];

            // Make the form data object
            var form_data = getBasicFormDataFromEpisode(episode_image);
            form_data.append('thumbnail', episode_image.file);

            execEpisodeAjaxCreate(
                form_data,
                function(result) {
                    console.log(result);
                    if (finish_for_image_only) {
                      $('[spinner-loading-for="' + result.number + '"]').addClass('hidden');
                      console.log('skipping video... (since there is none...)');
                      processed++;
                      if (processed == left) {
                        location.href = location.href;
                      }
                    }
                },
                function(e) {}
            );
          }

          if (episode[1]) {
            var episode_video = episode[1];

            // Make the form data object
            var form_data = getBasicFormDataFromEpisode(episode_video);
            form_data.append('video', episode_video.file);

            execEpisodeAjaxCreate(
                form_data,
                function(result) {
                    console.log(result);
                    $('[spinner-loading-for="' + result.number + '"]').addClass('hidden');
                    processed++;
                    if (processed == left) {
                      location.href = location.href;
                    }
                },
                function(e) {}
            );
          }
        });
        refreshShows();
      }

      function execEpisodeAjaxCreate(form_data, callback, errorCallback) {
        $.ajaxQueue({
            type: "POST",
            url: '/admin/episodes',
            data: form_data,
            async: true,
            cache: false,
            processData: false,
            contentType: false,
            success: callback,
            error: errorCallback
        });
      }

      function getBasicFormDataFromEpisode(episode) {
        let title = $('[episode-title-for="' + episode.number + '"]').val();

        var form_data = new FormData();
        form_data.append('title', title);
        form_data.append('episode_number', episode.number);
        form_data.append('filename', episode.name);
        form_data.append('show_id', current_show);
        form_data.append('published', $('[published-for="' + episode.number + '"]').is(':checked'));

        return form_data;
      }

      function setPublishedShow(is_published) {
        let show_id = $(this).attr('show-id');
        $.ajax({
          url: "/admin/shows/" + current_show + "/publish",
          method: 'patch',
          data: {published: is_published ? true : false},
          success: function(response) {
            //M.toast({html: response.message});
            $('#publish-switch').prop('checked', response.published).change();
            if (response.success) {
              refreshShows();
            }
          }
        });
      }

      function setPublishedEpisode(id, is_published) {
        $.ajax({
          url: "/admin/episodes/" + id,
          method: 'patch',
          data: {published: is_published ? true : false},
          success: function(response) {
            //M.toast({html: response.message});
            $('[publish-episode="' + id + '"]').prop('checked', response.published).change();
          }
        });
      }

      function setLoading(loading, hide_body) {
        if (loading) {
          if (hide_body) {
            $('#show-body').addClass('hidden');
          }
          $('#progress').removeClass('hidden');
          $('[waiting-for="small_banner"]').removeClass('hidden');
          $('#small_banner').addClass('img-loading');
        } else {
          $('#progress').addClass('hidden');
          $('#show-body').removeClass('hidden');
        }
      }

      function showBannerPreview(input) {
        if (input.files && input.files[0]) {
          var reader = new FileReader();

          reader.onload = function(e) {
            $('#banner_preview_cont').removeClass('hidden');
            $('#banner_preview').attr('src', e.target.result);
          }

          reader.readAsDataURL(input.files[0]);
        }
      }

      function setShowsClickable() {
        $('[show-id]').on('click', function(e) {
        let show_id = $(this).attr('show-id');
        $('[show-id]').removeClass('current');
        $(this).addClass('current');
        current_show = show_id;

        getShow(show_id, function(show) {
          $('#show-body').attr('current-show-id', show_id);
          $('[show-value="link-to"]').attr('href', '/shows?id=' + show_id);
          $('#publish-switch').prop('checked', show.published == true).change();
          $("#show-img-file").val('');
          $('#banner_preview_cont').addClass('hidden');
          $('#banner_preview').removeAttr('src');

          let properties = Object.keys(show);
          [].forEach.call(properties, function(prop) {
            let element = $('[show-value="' + prop + '"]');
            //console.log(element);
            if (element.length) {
              let value = show[prop];
              let element_type = element.attr('value-type');

              if (element_type == 'input' || element_type == 'textarea') {
                element.val(value);
                element.addClass('active');
                if (element_type == 'textarea') {
                  M.textareaAutoResize(element);
                }
              } else if (element_type == 'src') {
                element.attr('src', value);
              } else if (element_type == 'html') {
                element.html(value);
              }
            }
          });
          M.updateTextFields();
        });
      });
      }

      function refreshShows() {
        $.ajax({
          url: '/admin/shows.json',
          method: 'get',
          success: function(response) {
            published_shows = response.published;
            unpublished_shows = response.unpublished;

            drawShows('#published-list', published_shows);
            drawShows('#unpublished-list', unpublished_shows);

            setShowsClickable();

            let $go_to_element = $('div.clickable.current');
            $('#slide-out').animate({scrollTop: $go_to_element.offset().top}, 2000);
          }
        });
      }

      function drawShows(where, shows) {
        let $shows_cont = $(where);
        $shows_cont.html('');

        [].forEach.call(shows, function(show) {
          let $wrapper = $('<div class="clickable plz-hover"></div>');
          $wrapper.attr('show-id', show.id);
          $wrapper.attr('title', show.get_title);
          if (show.current) {
            $wrapper.addClass('current');
          }

          let $inner_wrapper = $('<li></li>');
          let $inner_wrapper_2 = $('<div class="row"></div>');

          let $cont_image = $('<div class="col s3"></div>');
          let $image = $('<img class="circle small-banner">');
          $image.attr('src', show.banner_url);
          $cont_image.append($image);

          let $cont_text = $('<div class="col s9"></div>');
          let $text = $('<span class="truncate show-title"></span>').text(show.get_title);
          $cont_text.append($text);

          $inner_wrapper_2.append($cont_image, $cont_text);
          $inner_wrapper.append($inner_wrapper_2);
          $wrapper.append($inner_wrapper);

          $shows_cont.append($wrapper);
        });
      }

      function drawEpisodes(episodes) {
        let $parent = $('#episodes-body');
        $parent.html('');
        [].forEach.call(episodes, function(episode) {
          let $wrapper = $('<tr>');

          let $title_td = $('<td style="padding: 0 40px;">');
          let $title_input = $('<input type="text" name="episode_title">');
          $title_input.val(episode.title);
          $title_td.append($title_input);
          $wrapper.append($title_td);

          let $published_td = $('<td>');
          let published_html = [
            '<div class="switch">',
                '<label>',
                  'no',
                  '<input publish-episode="' + episode.id + '" show-type="published" value-type="checkbox" type="checkbox" is-published="' + episode.published + '">',
                  '<span class="lever"></span>',
                  'yes',
                '</label>',
            '</div>'
          ];
          $published_td.append(published_html.join(''));
          $wrapper.append($published_td);

          let $preview_td = $('<td>');
          let $input_preview_wrapper = $('<div thumbnail-upload class="clickable">');
          let $preview_img = $('<img preview-thumbnail>');
          $preview_img.css('height', '100px');
          $preview_img.attr('src', episode.get_thumbnail_url);
          $preview_img.attr('episode-id', episode.id);
          $input_preview_wrapper.attr('episode-id', episode.id);
          $input_preview_wrapper.append($preview_img);
          $preview_td.append($input_preview_wrapper);
          $wrapper.append($preview_td);

          let $video_td = $('<td>');
          let $upload_btn = $('<div class="btn btn-floating"><i class="material-icons">cloud_upload</i></div>');
          $upload_btn.attr('upload-video-to', episode.id);
          $video_td.append($upload_btn);
          if (episode["has_video?"]) {
            let $open_video = $('<a target="_blank" class="btn orange">Open</a>');
            $open_video.attr('href', episode.get_video_url);
            $video_td.append($open_video);
          }
          $wrapper.append($video_td);

          $parent.append($wrapper);
        });

        [].forEach.call($("[publish-episode]"), function(element) {
          element = $(element);
          element.prop('checked', element.attr('is-published') == 'true');
        });

        $('[upload-video-to]').on('click', function(e) {
          $('#episode-video-file').attr('episode-id', $(this).attr('upload-video-to'));
          $('#episode-video-file').click();
        });

        $('[thumbnail-upload]').on('click', function() {
          $('#episode-img-file').attr('episode-id', $(this).attr('episode-id'));
          $('#episode-img-file').click();
        });

        $('[publish-episode]').on('click', function() {
          setPublishedEpisode($(this).attr('publish-episode'), $(this).is(':checked'));
        });
      }
    });
  </script>

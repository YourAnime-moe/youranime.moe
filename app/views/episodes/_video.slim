div.no-video.d-none
    span Sorry, it appears this video is broken. Please contact the administrator of the website.
    span If you have admin rights, please login
    a href="" here.

div style="margin-top: 10px;"
    = video_tag(@episode.get_video_url(expires_in: 100.minutes), id: "episode_video", class: "video-js vjs-big-play-centered vjs-default-skin", width: "640", height: "264", controls: "true", "data-setup": '{"fluid": true}')
        source src="#{asset_path(@episode.get_path(current_token))}" type="video/mp4"
        source src="#{asset_path(@episode.get_path(current_token))}" type="video/mkv"
        source src="#{asset_path(@episode.get_path(current_token))}" type="video/avi"
        - if @episode.show.subbed && false
            track kind='captions' src="/shows/episodes/subs?id=#{@episode.id}" srclang='en' label='English' default=''
        span MP4 not supported or video not found.

script src="https://vjs.zencdn.net/#{videojs_version}/video.js"
script src="/js/nextEpisode.js"

css:
    .previous, .next {
        color: white;
    }

.episode-player-title
    span.episode.player.title #{@episode.title}
    br
    span.episode.player.show #{t('anime.episodes.episode-number', number: @episode.episode_number)} ãƒ» #{@episode.show.get_title}

/ul.pager style="margin-bottom: 80px;"
    - if @episode.has_previous?
        .left
            - episode = @episode.previous
            - url = '/shows/episodes?id=' + episode.id.to_s
            - watched = "watched" if episode.was_watched_by? current_user
            .hoverable.clickable.hasmenu class="#{watched}" onclick="window.location.href='#{url}'"
                img.thumbnail src="#{episode.get_image_path(current_token)}" style="max-width: 100%"
                .left.episode-info
                    span.episode.number name="#{episode.id}" id='episode_#{episode.episode_number}' Episode #{episode.episode_number}
                    br
                    span.episode.title name="#{episode.id}" id='episode_#{episode.title}' #{episode.title}
                div.episode.progressVideo.hidden id="progress_#{episode.id}"

                .progress
                    - width = episode.progress_info(current_user, value_only: true)
                    .determinate episode_id="#{episode.id}" style="width: #{width}%"

    /- else
        li.previous
            a.none None

    - if @episode.has_next?
        .right
            - episode = @episode.next
            - url = '/shows/episodes?id=' + episode.id.to_s
            - watched = "watched" if episode.was_watched_by? current_user
            .hoverable.clickable.hasmenu class="#{watched}" onclick="window.location.href='#{url}'"
                img.thumbnail src="#{episode.get_image_path(current_token)}" style="max-width: 100%"
                .left.episode-info
                    span.episode.number name="#{episode.id}" id='episode_#{episode.episode_number}' Episode #{episode.episode_number}
                    br
                    span.episode.title name="#{episode.id}" id='episode_#{episode.title}' #{episode.title}
                div.episode.progressVideo.hidden id="progress_#{episode.id}"

                .progress
                    - width = episode.progress_info(current_user, value_only: true)
                    .determinate episode_id="#{episode.id}" style="width: #{width}%"
    /- else
        li.next
            a href="/shows" style="color: red; float: right;" Done. More?

    /.center
        button#resume_video.btn.btn-success.hidden Resume from last time


- if @episode.has_watched_mark?
    javascript:
        var watchedMark = parseInt(#{@episode.get_watched_mark});
- else
    javascript:
        var watchedMark = 91;

javascript:
    var video = document.getElementById('episode_video');
    var buttonResume = document.getElementById('resume_video');
    var isWatched = #{@episode.was_watched_by? current_user}
    var videoId = #{@episode.id};
    var userId = #{current_user.id};
    var markedAsWatched = false;
    var videoInfo = {
        videoId: videoId,
        userId: userId
    };

    var change_video_elements = document.getElementsByClassName('chg_video');
    [].forEach.call(change_video_elements, function(element) {
        element.onclick = function() {
            if (typeof(video.pause) === "function")
                video.pause();
            var url = element.getAttribute('link');
            document.location.replace(url);
        }
    });

    episode = getVideoFor(userId, videoId);

    video.addEventListener('timeupdate', function() {
        var currentTime = parseInt(video.currentTime);
        var duration = parseInt(video.duration);
        videoInfo.currentTime = currentTime;
        var ratio = (currentTime / duration) * 100;
        videoInfo.ratio = ratio

        if (currentTime > 10) {
            update(videoInfo);
        }

        if (currentTime % 8 != 0) {
            return;
        }

        sendProgress({id: videoId, progress: ratio, user_id: userId})

        if (ratio >= watchedMark) {
            setWatched(videoInfo);
        }
    });

    $('document').ready(function() {
        window.addEventListener('keydown', function(e) {
            if (e.keyCode === 32 && e.target == document.body) {
                e.preventDefault();
            }
        });

        document.addEventListener('keyup', function(e) {
            target = e.target;
            tagName = target.tagName;
            if (tagName == "TEXTAREA" || tagName == "INPUT") {
                return;
            }
            if (e.keyCode === 32) {
                if (video && video.play) {
                    if (video.paused) {
                        video.play();
                    } else {
                        video.pause();
                    }
                }
            } else if (e.keyCode == 37 || e.keyCode == 39) {
                if (e.keyCode == 37) {
                    video.currentTime -= 10;
                } else {
                    video.currentTime += 10;
                }
            }
        });

        videojs('episode_video').ready(function() {
            var vjsPlayer = this;
            vjsPlayer.on("pause", function() {
                vjsPlayer.bigPlayButton.show();
            });
            vjsPlayer.on("play", function() {
                vjsPlayer.bigPlayButton.hide();
            });

            video.onloadeddata = function(e) {
                var currentTime = #{@episode.progress_info(current_user, value_only: true)};
                currentTime = currentTime / 100;
                video.currentTime = video.duration * currentTime;
                if (#{current_user.can_autoplay?}) {
                    video.play();
                }
            }
        });
    });



    var videosList = localStorage.getItem('videos');
    if (videosList == null) {
        localStorage.setItem('videos', "[]");
    }

    videosList = getVideosList();

    if (isCurrentEpisode(episode) && buttonResume) {
        // Then there is some history with this video
        buttonResume.classList.remove('hidden');
        buttonResume.onclick = function(e) {
            var currentTime = episode.currentTime;
            if (currentTime > 3) {
                currentTime -= 3;
            }
            video.currentTime = currentTime;
            video.play();
            buttonResume.classList.add('disabled');
        };
    }

    function update(episode) {
        videosList = getVideosList();
        var index = -1;
        for(var i = 0; i < videosList.length; i++) {
            foundEpisode = videosList[i];
            if (foundEpisode.userId != userId || foundEpisode.videoId != videoId) {
                continue;
            }
            index = i;
        }
        if (index != -1) {
            videosList[index] = episode;
        } else {
            videosList.push(episode);
        }
        setVideosList(videosList);
    }

    function sendProgress(episode) {
        episode.token = '#{current_token}';
        $.ajax({
            type: 'PUT',
            url: '/api/update/episode/progress',
            data: episode,
            success: function(result) {
                console.log("Progress saved status:");
                console.log(result);
            }
        });
    }

    function setWatched(episode) {
        if (markedAsWatched) {
            return;
        }
        console.log("Making episode as watched...");
        $.ajax({
            type: 'POST',
            url: '/json/setWatched',
            data: 'id=' + videoId,
            success: function(response) {
                markedAsWatched = true;
            },
            fail: function() {
                console.log('Setting episode to watched failed.');
            }
        });
    }

    function setVideosList(list) {
        localStorage.setItem('videos', JSON.stringify(list));
    }

    function getVideosList() {
        if (localStorage.getItem('videos') == null) {
            localStorage.setItem('videos', "[]");
        }
        return JSON.parse(localStorage.getItem('videos'));
    }

    function getVideoFor(givenUserId, videoId) {
        videosList = getVideosList();
        if (givenUserId != userId) {
            console.log('Not permitted to get from other users.');
            return null;
        }
        for(var i = 0; i < videosList.length; i++) {
            foundEpisode = videosList[i];
            if (foundEpisode.userId == givenUserId && foundEpisode.videoId == videoId) {
                return foundEpisode;
            }
        }
        return null;
    }

    function isCurrentEpisode(episode) {
        return episode != null && episode.userId == userId && episode.videoId == videoId;
    }

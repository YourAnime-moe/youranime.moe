#next_episode_container
    .switch style="float: right"
        label
            input#autoplay type="checkbox"
            span.lever
    - if @episode.has_next?
        p.bold #{t('anime.episodes.up-next')}
        - episode = @episode.next
        - url = '/shows/episodes?id=' + episode.id.to_s
        - watched = "watched" if episode.was_watched_by? current_user
        .clickable.episode-info class="#{watched}" onclick="window.location.href='#{url}'"
            .thumbnail
                - if episode.has_thumbnail?
                    = image_tag(episode.get_thumbnail, class: "thumbnail")
                - else 
                    img.thumbnail src="/img/404.jpg"
                .progress
                    - width = episode.progress_info(current_user, value_only: true)
                    .determinate episode_id="#{episode.id}" style="width: #{width}%"

            .info
                .left.episode-info
                    span.episode.number name="#{episode.id}" id='episode_#{episode.episode_number}' #{t('anime.episodes.episode-number', number: episode.episode_number)}
                    br
                    span.episode.title name="#{episode.id}" id='episode_#{episode.title}' #{episode.title}
            div.episode.progressVideo.hidden id="progress_#{episode.id}"
    - else
        p.bold #{t('anime.episodes.last-episode')}

    br.episodes
    p.bold #{t('anime.episodes.discover')}

    - current_user.random_episode_selection(current_episode: @episode).each do |episode|
        - url = '/shows/episodes?id=' + episode.id.to_s
        - watched = "watched" if episode.was_watched_by? current_user
        .clickable.episode-info.other class="#{watched}" onclick="window.location.href='#{url}'"
            .thumbnail
                - if episode.has_thumbnail?
                    = image_tag(episode.get_thumbnail, class: "thumbnail")
                - else 
                    img.thumbnail src="/img/404.jpg"
                .progress
                    - width = episode.progress_info(current_user, value_only: true)
                    .determinate episode_id="#{episode.id}" style="width: #{width}%"

            .info
                .left.episode-info
                    span.episode.number name="#{episode.id}" id='episode_#{episode.episode_number}' #{t('anime.episodes.episode-number', number: episode.episode_number)}
                    br
                    span.episode.title name="#{episode.id}" id='episode_#{episode.title}' #{episode.title}
                    br
                    span.episode.show.title #{episode.show.get_title}
            div.episode.progressVideo.hidden id="progress_#{episode.id}"



    /   .text-center
        button#toggle_watched.hidden.btn.btn-default
        
    /- if @episode.is_last?
        - if @episode.show.episodes.size > 5
            p Wow, you've aleady watched #{@episode.show.episodes.size} episodes!
        - else
            p That's it!
    /- elsif @episode.is_first?
        p This is the first episode, there's plenty more to watch!

    /#episodes.collection
        - @episode.show.episodes(from: @episode).each do |episode|
            - next if @episode == episode
            - break if episode.id == @episode.show.episodes.first.id
            - url = '/shows/episodes?id=' + episode.id.to_s
            - watched = "active" if episode.was_watched_by? current_user
            a.collection-item class="#{watched}" href="#{url}" #{episode.episode_number}) #{episode.title}

javascript:
    var nextEpisodeContainer = $('#next_episode_container');
    var episodes = nextEpisodeContainer.find('#episodes');
    var toggleWatchedButton = $('#toggle_watched');

    var defaultText = 'Hide watched episodes';
    var showAllText = 'Show all episodes';

    $(document).ready(function() {
        toggleWatchedButton.html(defaultText);
        toggleWatchedButton.on('click', function(e) {
            if (!toggleWatchedButton.hasClass('on')) {
                hideEpisodes();
            } else {
                showEpisodes();
            }
        });

        $('#autoplay').prop('checked', autoplay_allowed);
        $('#autoplay').on('change', function(e) {
            $('#autoplay').attr('disabled', '');
            var new_change = $('#autoplay').is(':checked');
            $.ajax({
                url: '/api/update/user/settings',
                method: 'put',
                data: {
                    token: "#{current_token}",
                    setting_key: 'autoplay',
                    setting_value: new_change
                },
                success: function(e) {
                    $('#autoplay').removeAttr('disabled');
                    console.log(e);
                },
                error: function(e) {
                    $('#autoplay').removeAttr('disabled');
                }
            });
        });

    });

    function hideEpisodes() {
        setEpisodes(false);
        toggleWatchedButton.html(showAllText);
        toggleWatchedButton.addClass('on');
        toggleWatchedButton.removeClass('btn-default');
        toggleWatchedButton.addClass('btn-success');
    }

    function showEpisodes() {
        setEpisodes(true);
        toggleWatchedButton.html(defaultText);
        toggleWatchedButton.removeClass('on');
        toggleWatchedButton.addClass('btn-default');
        toggleWatchedButton.removeClass('btn-success');
    }

    function setEpisodes(enabled) {
        children = episodes.children();
        for (var i = 0; i < children.length; i++) {
            episode = children[i];
            if (episode.classList.contains('next_episode')) {
                if (enabled) {
                    episode.classList.remove('hidden');
                } else {
                    if (episode.classList.contains('watched')) {
                        episode.classList.add('hidden');
                    }
                }
            }
        }
    }

